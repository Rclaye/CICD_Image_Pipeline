pipeline {
    agent any

    // Use the tools directive to automatically install tools.
    // This creates the "Declarative: Tool Install" stage in Blue Ocean.
    tools {
        sonarqube 'sonarqube'       // Name from Global Tool Configuration
        docker 'docker-inst'        // Name of your Docker installation
    }

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        // NOTE: The PATH variable and helper functions are removed/commented out 
        // because the 'tools' directive handles it better for the desired stage view.
    }

    stages {
        // --- STAGES FROM YOUR CLASSMATE'S EXAMPLE ---

        stage ('Sonarcube Scan') {
            steps {
                // The Sonar Scanner is now available in PATH, no need for tool 'sonarqube' in a script block.
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
                    withSonarQubeEnv('SonarQubeScanner') {
                        // The 'sonar-scanner' command works directly because 'tools' set the PATH
                        sh " sonar-scanner \
                        -Dsonar.projectKey=CliXX-App-RC-loca \
                        -Dsonar.login=${SONAR_TOKEN} "
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // --- NEW CICD STAGES ---

        stage ('Build Docker Image') {
            steps {
                sh "docker build . -t clixx-image:$VERSION "
            }
        }

        stage ('Starting Docker Image') {
            steps {
                sh '''
                if ( docker ps|grep clixx-cont ) then
                    echo "Docker image exists, killing it"
                    docker stop clixx-cont
                    docker rm clixx-cont
                    docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                else
                    docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                fi
                '''
            }
        }

        stage ('Restore CliXX Database') {
            steps {
                sh '''
                # Execute Ansible Playbook to restore the RDS instance
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml
                deactivate
                '''
            }
        }

        stage ('Configure DB Instance') {
            steps {
                // IMPORTANT: REPLACE ALL CREDENTIALS IDs WITH YOURS
                withCredentials([
                    string(credentialsId: 'DB_USER_NAME_CRED_ID', variable: 'DB_USER'), // e.g., 'wordpressuser'
                    string(credentialsId: 'DB_PASSWORD_CRED_ID', variable: 'DB_PASS'), // e.g., 'W3lcome123'
                    string(credentialsId: 'DB_NAME_CRED_ID', variable: 'DB_NAME'),     // e.g., 'wordpressdb'
                    string(credentialsId: 'DB_INSTANCE_CRED_ID', variable: 'DB_INSTANCE') // e.g., 'wordpressdbclixxjenkins.rds.amazonaws.com'
                ]){
                    sh '''
                    SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
                    
                    # Create setup file
                    echo "use ${DB_NAME};" >> $WORKSPACE/db.setup
                    echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';">> $WORKSPACE/db.setup
                    
                    # Run DB update
                    mysql -u ${DB_USER} --password=${DB_PASS} -h ${DB_INSTANCE} -D ${DB_NAME} < $WORKSPACE/db.setup
                    '''
                }
            }
        }

        stage ('Tear Down CliXX Docker Image and Database') {
            steps {
                // Pause for manual confirmation before deleting resources
                script {
                    input(id: 'confirm_teardown', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with deletion?', name: 'confirm'] ])
                }
                sh '''
                # Delete RDS instance using Ansible playbook
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
                deactivate
                
                # Stop and remove local Docker container
                docker stop clixx-cont
                docker rm clixx-cont
                '''
            }
        }

        stage ('Log Into ECR and push the newly created Docker') {
            steps {
                // Pause for manual confirmation before pushing to ECR
                script {
                    input(id: 'confirm_push', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
                }
                // IMPORTANT: REPLACE ECR CREDENTIALS IDs WITH YOURS
                withCredentials([
                    string(credentialsId: 'ECR_USERNAME_CRED_ID', variable: 'ECR_USERNAME'), // typically 'AWS'
                    string(credentialsId: 'ECR_REPO_CRED_ID', variable: 'ECR_REPO_URI'),     // e.g., 'xxxxxxxxxxxx.dkr.ecr.us-east-1.amazonaws.com/clixx-repository'
                ]){
                    sh '''
                    # ECR Login
                    aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO_URI}
                    
                    # Tag and Push
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:latest
                    docker push ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker push ${ECR_REPO_URI}:latest
                    '''
                }
            }
        }
        
        // The "Declarative: Post Actions" stage is added automatically by Jenkins
    }
}