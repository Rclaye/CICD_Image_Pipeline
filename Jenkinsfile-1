pipeline {
    agent any

    // CRITICAL for getting the "Declarative: Tool Install" stage view
    tools {
        sonarqube 'sonarqube'       // Name used in Global Tool Configuration
        docker 'docker-inst'        // Name of your Docker installation
    }

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
    }

    stages {
        // --- SONARQUBE STAGES (Existing) ---
        stage ('Sonarcube Scan') {
            steps {
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
                    withSonarQubeEnv('SonarQubeScanner') {
                        // The scanner command works directly because 'tools' set the PATH
                        sh " sonar-scanner -Dsonar.projectKey=CliXX-App-RC-loca -Dsonar.login=${SONAR_TOKEN} "
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // --- DOCKER AND DB STAGES (New) ---

        stage ('Build Docker Image') {
            steps {
                sh "docker build ./html -t clixx-image:$VERSION " // NOTE: Assuming Dockerfile is in 'html'
            }
        }

        stage ('Starting Docker Image') {
            steps {
                sh '''
                if ( docker ps|grep clixx-cont ) then
                    docker stop clixx-cont
                    docker rm clixx-cont
                    docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                else
                    docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                fi
                '''
            }
        }

        stage ('Restore CliXX Database') {
            steps {
                sh '''
                # NOTE: Assuming deploy_db_ansible is at the WORKSPACE root. 
                # If not, change path to $WORKSPACE/html/deploy_db_ansible
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml
                deactivate
                '''
            }
        }

        stage ('Configure DB Instance') {
            steps {
                // Securely retrieving credentials from Jenkins
                withCredentials([
                    string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASS'),
                    string(credentialsId: 'DB_NAME', variable: 'DB_NAME'),
                    string(credentialsId: 'SERVER_INSTANCE', variable: 'DB_INSTANCE_ENDPOINT')
                ]){
                    sh '''
                    SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
                    
                    echo "use ${DB_NAME};" >> $WORKSPACE/db.setup
                    echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';">> $WORKSPACE/db.setup
                    
                    # Run DB update
                    mysql -u ${DB_USER} --password=${DB_PASS} -h ${DB_INSTANCE_ENDPOINT} -D ${DB_NAME} < $WORKSPACE/db.setup
                    '''
                }
            }
        }

        stage ('Tear Down CliXX Docker Image and Database') {
            steps {
                script {
                    input(id: 'confirm_teardown', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with deletion?', name: 'confirm'] ])
                }
                sh '''
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
                deactivate
                docker stop clixx-cont
                docker rm clixx-cont
                '''
            }
        }

        stage ('Log Into ECR and push the newly created Docker') {
            steps {
                script {
                    input(id: 'confirm_push', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
                }
                withCredentials([
                    string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'),
                    string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO_URI'), 
                ]){
                    sh '''
                    # ECR Login
                    aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO_URI}
                    
                    # Tag and Push
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:latest
                    docker push ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker push ${ECR_REPO_URI}:latest
                    '''
                }
            }
        }
    } 
}
// Note: Helper functions getSonarPath() and getDockerPath() are no longer needed
// when using the declarative 'tools' block above.