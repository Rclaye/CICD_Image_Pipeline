pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}"
        DB_INSTANCE_URL = 'wordpressdbclixxjenkins.cd7numzl1xfe.us-east-1.rds.amazonaws.com' 
    }

    stages {
        // --- SONARQUBE STAGES (FINAL PATH FIX) ---
        stage ('Sonarcube Scan') {
            steps {
                script {
                    scannerHome = getSonarPath()
                    java11Home = getJava11Path()
                }
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
                    withSonarQubeEnv('SonarQubeScanner') { 
                        sh """ 
                        export JAVA_HOME='${java11Home}'
                        
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=CliXX-App-RC \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                        // FIX: Changed -Dsonar.sources from ./html/html to the correct ./html
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // --- DOCKER AND DB STAGES (FINAL PATH FIXES) ---
        
        stage ('Build Docker Image') {
            steps {
                // FIX: Changed docker build context to ./html
                sh "docker build ./html -t clixx-image:$VERSION " 
            }
        }

        stage ('Starting Docker Image') {
            steps {
                sh '''
                if ( docker ps|grep clixx-cont ) then
                    docker stop clixx-cont
                    docker rm clixx-cont
                fi
                docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                '''
            }
        }

        stage ('Restore CliXX Database') {
            steps {
                sh '''
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                // FIX: Changed Ansible path to $WORKSPACE/html/deploy_db_ansible
                ansible-playbook $WORKSPACE/html/deploy_db_ansible/deploy_db.yml 
                deactivate
                '''
            }
        }

        stage ('Configure DB Instance') {
            steps {
                withCredentials([
                    string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASS'),
                    string(credentialsId: 'DB_NAME', variable: 'DB_NAME'),
                ]){
                    sh '''
                    SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
                    
                    echo "use ${DB_NAME};" >> $WORKSPACE/db.setup
                    echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';">> $WORKSPACE/db.setup
                    
                    mysql -u ${DB_USER} --password=${DB_PASS} -h ${DB_INSTANCE_URL} -D ${DB_NAME} < $WORKSPACE/db.setup
                    '''
                }
            }
        }

        stage ('Tear Down CliXX Docker Image and Database') {
            steps {
                script {
                    input(id: 'confirm_teardown', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Proceed with deletion?', name: 'confirm'] ])
                }
                sh '''
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                // FIX: Changed Ansible path to $WORKSPACE/html/deploy_db_ansible
                ansible-playbook $WORKSPACE/html/deploy_db_ansible/delete_db.yml
                deactivate
                docker stop clixx-cont
                docker rm clixx-cont
                '''
            }
        }

        stage ('Log Into ECR and push the newly created Docker') {
            steps {
                withCredentials([
                    string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'), 
                    string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO_URI'),     
                ]){
                    script {
                        input(id: 'confirm_push', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
                    }
                    sh '''
                    aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO_URI}
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:latest
                    docker push ${ECR_REPO_URI}:clixx-image-$VERSION
                    '''
                }
            }
        }
    } 
}

// --- HELPER FUNCTIONS ---

def getSonarPath(){
    def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    return SonarHome
}

def getJava11Path() {
    def java11Home = tool name: 'java11', type: 'hudson.model.JDK'
    return java11Home
}