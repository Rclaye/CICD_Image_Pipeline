pipeline {
    agent any

    environment {
        VERSION = "1.0.${BUILD_NUMBER}"
        PATH = "${PATH}:${getSonarPath()}"
        DB_INSTANCE_URL = 'wordpressdbclixxjenkins.cy5secw8qpif.us-east-1.rds.amazonaws.com' 
    }

    stages {
        // --- SONARQUBE STAGES ---
        stage ('Sonarcube Scan') {
            steps {
                script {
                    scannerHome = getSonarPath()
                    java11Home = getJava11Path() 
                }
                withCredentials([string(credentialsId: 'SONAR_TOKEN', variable: 'SONAR_TOKEN')]){
                    withSonarQubeEnv('SonarQubeScanner') { 
                        sh """ 
                        # CRITICAL FIX: EXPORT JAVA_HOME to force use of Java 11
                        export JAVA_HOME='${java11Home}'
                        
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=CliXX-App-RC \
                        -Dsonar.sources=. \
                        -Dsonar.exclusions=**/wp-admin/**,**/wp-includes/**,**/wp-content/themes/**,**/wp-content/plugins/** \
                        -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        // --- QUALITY GATE ---
        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // --- DOCKER STAGES ---
        stage ('Build Docker Image') {
            steps {
                sh "docker build . -t clixx-image:$VERSION " 
            }
        }

        stage ('Starting Docker Image') {
            steps {
                sh '''
                if ( docker ps|grep clixx-cont ) then
                    docker stop clixx-cont
                    docker rm clixx-cont
                fi
                docker run --name clixx-cont -p 80:80 -d clixx-image:$VERSION
                '''
            }
        }

        stage ('Restore CliXX Database') {
            steps {
                sh '''
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/deploy_db.yml 
                deactivate
                '''
            }
        }

        stage ('Configure DB Instance') {
            steps {
                withCredentials([
                    string(credentialsId: 'DB_USER_NAME', variable: 'DB_USER'),
                    string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASS'),
                    string(credentialsId: 'DB_NAME', variable: 'DB_NAME'),
                ]){
                    sh '''
                    SERVER_IP=$(curl -s http://checkip.dyndns.org | sed -e 's/.*Current IP Address: //' -e 's/<.*$//')
                    
                    echo "use ${DB_NAME};" > $WORKSPACE/db.setup
                    echo "UPDATE wp_options SET option_value = '$SERVER_IP' WHERE option_value LIKE 'http%';" >> $WORKSPACE/db.setup
                    
                    mysql -u ${DB_USER} --password=${DB_PASS} -h ${DB_INSTANCE_URL} -D ${DB_NAME} < $WORKSPACE/db.setup
                    '''
                }
            }
        }

        stage ('Tear Down CliXX Docker Image and Database') {
            steps {
                script {
                    input(id: 'confirm_teardown', message: 'Tear Down Environment?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Tear Down Environment?', name: 'confirm'] ])
                }
                sh '''
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml
                deactivate
                docker stop clixx-cont
                docker rm clixx-cont
                '''
            }
        }

        stage ('Log Into ECR and push the newly created Docker') {
            steps {
                withCredentials([
                    string(credentialsId: 'ECR_USERNAME', variable: 'ECR_USERNAME'), 
                    string(credentialsId: 'ECR_REPO', variable: 'ECR_REPO_URI'),     
                ]){
                    script {
                        input(id: 'confirm_push', message: 'Push Image To ECR?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Push to ECR?', name: 'confirm'] ])
                    }
                    sh '''
                    # Assume the cross-account role for ECR access
                    CREDENTIALS=$(aws sts assume-role --role-arn "arn:aws:iam::924305315126:role/Engineer" --role-session-name "jenkins-ecr-push" --region us-east-1)
                    
                    # Extract temporary credentials
                    export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r .Credentials.AccessKeyId)
                    export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r .Credentials.SecretAccessKey)
                    export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r .Credentials.SessionToken)
                    
                    # Use the assumed role to get ECR login password
                    aws ecr get-login-password --region us-east-1 | docker login --username ${ECR_USERNAME} --password-stdin ${ECR_REPO_URI}
                    
                    # Tag and push the Docker image
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker tag clixx-image:$VERSION ${ECR_REPO_URI}:latest
                    docker push ${ECR_REPO_URI}:clixx-image-$VERSION
                    docker push ${ECR_REPO_URI}:latest
                    '''
                }
            }
        }
    }
    
    // --- POST ACTIONS ---
    post {
        failure {
            echo '========== PIPELINE FAILED - CLEANING UP RESOURCES =========='
            script {
                // Clean up Docker container
                sh '''
                if docker ps -a | grep clixx-cont; then
                    echo "Stopping and removing Docker container..."
                    docker stop clixx-cont || true
                    docker rm clixx-cont || true
                fi
                '''
                
                // Clean up RDS database
                sh '''
                echo "Deleting RDS database instance..."
                python3 -m venv python3-virtualenv
                source python3-virtualenv/bin/activate
                pip3 install boto3 botocore boto ansible
                ansible-playbook $WORKSPACE/deploy_db_ansible/delete_db.yml || echo "Database deletion failed or already deleted"
                deactivate
                '''
            }
        }
        
        success {
            echo '========== PIPELINE COMPLETED SUCCESSFULLY =========='
        }
        
        always {
            echo '========== PIPELINE FINISHED =========='
            // Clean up workspace if needed
            // cleanWs()
        }
    }
}

// --- HELPER FUNCTIONS ---

def getSonarPath(){
    def SonarHome= tool name: 'sonarqube', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    return SonarHome
}

def getJava11Path() {
    def java11Home = tool name: 'java11', type: 'hudson.model.JDK'
    return java11Home
}